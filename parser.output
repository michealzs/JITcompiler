Terminals unused in grammar

    REMOP
    ARROW
    CASE
    ENDSWITCH
    OTHERS
    SWITCH


State 4 conflicts: 1 reduce/reduce
State 17 conflicts: 1 reduce/reduce
State 35 conflicts: 12 reduce/reduce
State 36 conflicts: 12 reduce/reduce
State 37 conflicts: 12 reduce/reduce
State 38 conflicts: 12 reduce/reduce
State 39 conflicts: 12 reduce/reduce
State 50 conflicts: 3 shift/reduce
State 62 conflicts: 4 shift/reduce
State 75 conflicts: 7 shift/reduce
State 88 conflicts: 2 shift/reduce
State 98 conflicts: 12 reduce/reduce
State 105 conflicts: 3 shift/reduce
State 106 conflicts: 4 shift/reduce


Grammar

    0 $accept: function $end

    1 function: function_header optional_variable body ';'

    2 function_header: FUNCTION IDENTIFIER RETURNS type ';'
    3                | FUNCTION IDENTIFIER parameters RETURNS type ';'
    4                | error ';'

    5 parameters: parameter more_parameters

    6 more_parameters: ',' parameter more_parameters
    7                | ε

    8 parameter: IDENTIFIER ':' type

    9 type: INTEGER
   10     | REAL
   11     | CHARACTER

   12 optional_variable: variables
   13                  | ε
   14                  | error ';'

   15 variables: variable variables
   16          | ε
   17          | error ';'

   18 variable: IDENTIFIER ':' type IS statement ';'
   19         | IDENTIFIER ':' LIST OF type IS list ';'

   20 list: '(' expressions ')'

   21 expressions: expressions ',' expression
   22            | expression

   23 body: BEGIN_ statement_ END

   24 statement_: statement ';'
   25           | error ';'

   26 statement: WHEN condition
   27          | expression
   28          | WHEN condition ',' expression ':' expression
   29          | if_statement
   30          | fold_statement

   31 fold_statement: FOLD direction arithmetic_operator list_choice ENDFOLD

   32 direction: LEFT
   33          | RIGHT

   34 list_choice: list
   35            | IDENTIFIER

   36 if_statement: IF condition THEN statement_ elsif_clauses ENDIF
   37             | IF condition THEN statement_ elsif_clauses ELSE statement_ ENDIF

   38 elsif_clauses: ε
   39              | ELSIF condition THEN statement_ elsif_clauses

   40 condition: condition ANDOP relation
   41          | condition OROP relation
   42          | NOTOP condition
   43          | relation

   44 relation: '(' condition ')'
   45         | expression RELOP expression

   46 expression: '(' expression ')'
   47           | expression arithmetic_operator expression
   48           | NEGOP expression
   49           | INT_LITERAL
   50           | CHAR_LITERAL
   51           | REAL_LITERAL
   52           | HEX_LITERAL
   53           | FLOAT_LITERAL
   54           | expression ADDOP term
   55           | term

   56 arithmetic_operator: ADDOP
   57                    | MULOP
   58                    | MODOP
   59                    | EXPOP

   60 term: term EXPOP primary
   61     | term MULOP primary
   62     | term MODOP primary
   63     | primary

   64 primary: '(' expression ')'
   65        | INT_LITERAL
   66        | CHAR_LITERAL
   67        | REAL_LITERAL
   68        | HEX_LITERAL
   69        | FLOAT_LITERAL
   70        | IDENTIFIER '(' expression ')'
   71        | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 20 44 46 64 70
    ')' (41) 20 44 46 64 70
    ',' (44) 6 21 28
    ':' (58) 8 18 19 28
    ';' (59) 1 2 3 4 14 17 18 19 24 25
    error (256) 4 14 17 25
    IDENTIFIER <iden> (258) 2 3 8 18 19 35 70 71
    INT_LITERAL <value> (259) 49 65
    CHAR_LITERAL <value> (260) 50 66
    REAL_LITERAL <value> (261) 51 67
    HEX_LITERAL <value> (262) 52 68
    FLOAT_LITERAL <value> (263) 53 69
    ADDOP <oper> (264) 54 56
    MULOP <oper> (265) 57 61
    ANDOP <oper> (266) 40
    RELOP <oper> (267) 45
    EXPOP <oper> (268) 59 60
    REMOP <oper> (269)
    NEGOP <oper> (270) 48
    MODOP <oper> (271) 58 62
    NOTOP <oper> (272) 42
    OROP <oper> (273) 41
    ARROW (274)
    BEGIN_ (275) 23
    CASE (276)
    CHARACTER (277) 11
    ELSE (278) 37
    END (279) 23
    ENDSWITCH (280)
    FUNCTION (281) 2 3
    INTEGER (282) 9
    IS (283) 18 19
    LIST (284) 19
    OF (285) 19
    OTHERS (286)
    RETURNS (287) 2 3
    SWITCH (288)
    WHEN (289) 26 28
    REAL (290) 10
    IF (291) 36 37
    THEN (292) 36 37 39
    ELSIF (293) 39
    ENDIF (294) 36 37
    FOLD (295) 31
    ENDFOLD (296) 31
    LEFT (297) 32
    RIGHT (298) 33


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    function (50)
        on left: 1
        on right: 0
    function_header (51)
        on left: 2 3 4
        on right: 1
    parameters (52)
        on left: 5
        on right: 3
    more_parameters (53)
        on left: 6 7
        on right: 5 6
    parameter (54)
        on left: 8
        on right: 5 6
    type (55)
        on left: 9 10 11
        on right: 2 3 8 18 19
    optional_variable (56)
        on left: 12 13 14
        on right: 1
    variables (57)
        on left: 15 16 17
        on right: 12 15
    variable (58)
        on left: 18 19
        on right: 15
    list <list> (59)
        on left: 20
        on right: 19 34
    expressions <list> (60)
        on left: 21 22
        on right: 20 21
    body <value> (61)
        on left: 23
        on right: 1
    statement_ <value> (62)
        on left: 24 25
        on right: 23 36 37 39
    statement <value> (63)
        on left: 26 27 28 29 30
        on right: 18 24
    fold_statement <value> (64)
        on left: 31
        on right: 30
    direction <direction> (65)
        on left: 32 33
        on right: 31
    list_choice <list> (66)
        on left: 34 35
        on right: 31
    if_statement <value> (67)
        on left: 36 37
        on right: 29
    elsif_clauses <value> (68)
        on left: 38 39
        on right: 36 37 39
    condition <value> (69)
        on left: 40 41 42 43
        on right: 26 28 36 37 39 40 41 42 44
    relation <value> (70)
        on left: 44 45
        on right: 40 41 43
    expression <value> (71)
        on left: 46 47 48 49 50 51 52 53 54 55
        on right: 21 22 27 28 45 46 47 48 54 64 70
    arithmetic_operator <oper> (72)
        on left: 56 57 58 59
        on right: 31 47
    term <value> (73)
        on left: 60 61 62 63
        on right: 54 55 60 61 62
    primary <value> (74)
        on left: 64 65 66 67 68 69 70 71
        on right: 60 61 62 63


State 0

    0 $accept: • function $end

    error     shift, and go to state 1
    FUNCTION  shift, and go to state 2

    function         go to state 3
    function_header  go to state 4


State 1

    4 function_header: error • ';'

    ';'  shift, and go to state 5


State 2

    2 function_header: FUNCTION • IDENTIFIER RETURNS type ';'
    3                | FUNCTION • IDENTIFIER parameters RETURNS type ';'

    IDENTIFIER  shift, and go to state 6


State 3

    0 $accept: function • $end

    $end  shift, and go to state 7


State 4

    1 function: function_header • optional_variable body ';'

    error       shift, and go to state 8
    IDENTIFIER  shift, and go to state 9

    BEGIN_  reduce using rule 13 (optional_variable)
    BEGIN_  [reduce using rule 16 (variables)]

    optional_variable  go to state 10
    variables          go to state 11
    variable           go to state 12


State 5

    4 function_header: error ';' •

    $default  reduce using rule 4 (function_header)


State 6

    2 function_header: FUNCTION IDENTIFIER • RETURNS type ';'
    3                | FUNCTION IDENTIFIER • parameters RETURNS type ';'

    IDENTIFIER  shift, and go to state 13
    RETURNS     shift, and go to state 14

    parameters  go to state 15
    parameter   go to state 16


State 7

    0 $accept: function $end •

    $default  accept


State 8

   14 optional_variable: error • ';'
   17 variables: error • ';'

    ';'  shift, and go to state 17


State 9

   18 variable: IDENTIFIER • ':' type IS statement ';'
   19         | IDENTIFIER • ':' LIST OF type IS list ';'

    ':'  shift, and go to state 18


State 10

    1 function: function_header optional_variable • body ';'

    BEGIN_  shift, and go to state 19

    body  go to state 20


State 11

   12 optional_variable: variables •

    $default  reduce using rule 12 (optional_variable)


State 12

   15 variables: variable • variables

    error       shift, and go to state 21
    IDENTIFIER  shift, and go to state 9

    BEGIN_  reduce using rule 16 (variables)

    variables  go to state 22
    variable   go to state 12


State 13

    8 parameter: IDENTIFIER • ':' type

    ':'  shift, and go to state 23


State 14

    2 function_header: FUNCTION IDENTIFIER RETURNS • type ';'

    CHARACTER  shift, and go to state 24
    INTEGER    shift, and go to state 25
    REAL       shift, and go to state 26

    type  go to state 27


State 15

    3 function_header: FUNCTION IDENTIFIER parameters • RETURNS type ';'

    RETURNS  shift, and go to state 28


State 16

    5 parameters: parameter • more_parameters

    ','  shift, and go to state 29

    $default  reduce using rule 7 (more_parameters)

    more_parameters  go to state 30


State 17

   14 optional_variable: error ';' •
   17 variables: error ';' •

    BEGIN_    reduce using rule 14 (optional_variable)
    BEGIN_    [reduce using rule 17 (variables)]
    $default  reduce using rule 14 (optional_variable)


State 18

   18 variable: IDENTIFIER ':' • type IS statement ';'
   19         | IDENTIFIER ':' • LIST OF type IS list ';'

    CHARACTER  shift, and go to state 24
    INTEGER    shift, and go to state 25
    LIST       shift, and go to state 31
    REAL       shift, and go to state 26

    type  go to state 32


State 19

   23 body: BEGIN_ • statement_ END

    error          shift, and go to state 33
    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    WHEN           shift, and go to state 41
    IF             shift, and go to state 42
    FOLD           shift, and go to state 43
    '('            shift, and go to state 44

    statement_      go to state 45
    statement       go to state 46
    fold_statement  go to state 47
    if_statement    go to state 48
    expression      go to state 49
    term            go to state 50
    primary         go to state 51


State 20

    1 function: function_header optional_variable body • ';'

    ';'  shift, and go to state 52


State 21

   17 variables: error • ';'

    ';'  shift, and go to state 53


State 22

   15 variables: variable variables •

    $default  reduce using rule 15 (variables)


State 23

    8 parameter: IDENTIFIER ':' • type

    CHARACTER  shift, and go to state 24
    INTEGER    shift, and go to state 25
    REAL       shift, and go to state 26

    type  go to state 54


State 24

   11 type: CHARACTER •

    $default  reduce using rule 11 (type)


State 25

    9 type: INTEGER •

    $default  reduce using rule 9 (type)


State 26

   10 type: REAL •

    $default  reduce using rule 10 (type)


State 27

    2 function_header: FUNCTION IDENTIFIER RETURNS type • ';'

    ';'  shift, and go to state 55


State 28

    3 function_header: FUNCTION IDENTIFIER parameters RETURNS • type ';'

    CHARACTER  shift, and go to state 24
    INTEGER    shift, and go to state 25
    REAL       shift, and go to state 26

    type  go to state 56


State 29

    6 more_parameters: ',' • parameter more_parameters

    IDENTIFIER  shift, and go to state 13

    parameter  go to state 57


State 30

    5 parameters: parameter more_parameters •

    $default  reduce using rule 5 (parameters)


State 31

   19 variable: IDENTIFIER ':' LIST • OF type IS list ';'

    OF  shift, and go to state 58


State 32

   18 variable: IDENTIFIER ':' type • IS statement ';'

    IS  shift, and go to state 59


State 33

   25 statement_: error • ';'

    ';'  shift, and go to state 60


State 34

   70 primary: IDENTIFIER • '(' expression ')'
   71        | IDENTIFIER •

    '('  shift, and go to state 61

    $default  reduce using rule 71 (primary)


State 35

   49 expression: INT_LITERAL •
   65 primary: INT_LITERAL •

    ADDOP     reduce using rule 49 (expression)
    ADDOP     [reduce using rule 65 (primary)]
    MULOP     reduce using rule 49 (expression)
    MULOP     [reduce using rule 65 (primary)]
    ANDOP     reduce using rule 49 (expression)
    ANDOP     [reduce using rule 65 (primary)]
    RELOP     reduce using rule 49 (expression)
    RELOP     [reduce using rule 65 (primary)]
    EXPOP     reduce using rule 49 (expression)
    EXPOP     [reduce using rule 65 (primary)]
    MODOP     reduce using rule 49 (expression)
    MODOP     [reduce using rule 65 (primary)]
    OROP      reduce using rule 49 (expression)
    OROP      [reduce using rule 65 (primary)]
    THEN      reduce using rule 49 (expression)
    THEN      [reduce using rule 65 (primary)]
    ';'       reduce using rule 49 (expression)
    ';'       [reduce using rule 65 (primary)]
    ','       reduce using rule 49 (expression)
    ','       [reduce using rule 65 (primary)]
    ':'       reduce using rule 49 (expression)
    ':'       [reduce using rule 65 (primary)]
    ')'       reduce using rule 49 (expression)
    ')'       [reduce using rule 65 (primary)]
    $default  reduce using rule 49 (expression)


State 36

   50 expression: CHAR_LITERAL •
   66 primary: CHAR_LITERAL •

    ADDOP     reduce using rule 50 (expression)
    ADDOP     [reduce using rule 66 (primary)]
    MULOP     reduce using rule 50 (expression)
    MULOP     [reduce using rule 66 (primary)]
    ANDOP     reduce using rule 50 (expression)
    ANDOP     [reduce using rule 66 (primary)]
    RELOP     reduce using rule 50 (expression)
    RELOP     [reduce using rule 66 (primary)]
    EXPOP     reduce using rule 50 (expression)
    EXPOP     [reduce using rule 66 (primary)]
    MODOP     reduce using rule 50 (expression)
    MODOP     [reduce using rule 66 (primary)]
    OROP      reduce using rule 50 (expression)
    OROP      [reduce using rule 66 (primary)]
    THEN      reduce using rule 50 (expression)
    THEN      [reduce using rule 66 (primary)]
    ';'       reduce using rule 50 (expression)
    ';'       [reduce using rule 66 (primary)]
    ','       reduce using rule 50 (expression)
    ','       [reduce using rule 66 (primary)]
    ':'       reduce using rule 50 (expression)
    ':'       [reduce using rule 66 (primary)]
    ')'       reduce using rule 50 (expression)
    ')'       [reduce using rule 66 (primary)]
    $default  reduce using rule 50 (expression)


State 37

   51 expression: REAL_LITERAL •
   67 primary: REAL_LITERAL •

    ADDOP     reduce using rule 51 (expression)
    ADDOP     [reduce using rule 67 (primary)]
    MULOP     reduce using rule 51 (expression)
    MULOP     [reduce using rule 67 (primary)]
    ANDOP     reduce using rule 51 (expression)
    ANDOP     [reduce using rule 67 (primary)]
    RELOP     reduce using rule 51 (expression)
    RELOP     [reduce using rule 67 (primary)]
    EXPOP     reduce using rule 51 (expression)
    EXPOP     [reduce using rule 67 (primary)]
    MODOP     reduce using rule 51 (expression)
    MODOP     [reduce using rule 67 (primary)]
    OROP      reduce using rule 51 (expression)
    OROP      [reduce using rule 67 (primary)]
    THEN      reduce using rule 51 (expression)
    THEN      [reduce using rule 67 (primary)]
    ';'       reduce using rule 51 (expression)
    ';'       [reduce using rule 67 (primary)]
    ','       reduce using rule 51 (expression)
    ','       [reduce using rule 67 (primary)]
    ':'       reduce using rule 51 (expression)
    ':'       [reduce using rule 67 (primary)]
    ')'       reduce using rule 51 (expression)
    ')'       [reduce using rule 67 (primary)]
    $default  reduce using rule 51 (expression)


State 38

   52 expression: HEX_LITERAL •
   68 primary: HEX_LITERAL •

    ADDOP     reduce using rule 52 (expression)
    ADDOP     [reduce using rule 68 (primary)]
    MULOP     reduce using rule 52 (expression)
    MULOP     [reduce using rule 68 (primary)]
    ANDOP     reduce using rule 52 (expression)
    ANDOP     [reduce using rule 68 (primary)]
    RELOP     reduce using rule 52 (expression)
    RELOP     [reduce using rule 68 (primary)]
    EXPOP     reduce using rule 52 (expression)
    EXPOP     [reduce using rule 68 (primary)]
    MODOP     reduce using rule 52 (expression)
    MODOP     [reduce using rule 68 (primary)]
    OROP      reduce using rule 52 (expression)
    OROP      [reduce using rule 68 (primary)]
    THEN      reduce using rule 52 (expression)
    THEN      [reduce using rule 68 (primary)]
    ';'       reduce using rule 52 (expression)
    ';'       [reduce using rule 68 (primary)]
    ','       reduce using rule 52 (expression)
    ','       [reduce using rule 68 (primary)]
    ':'       reduce using rule 52 (expression)
    ':'       [reduce using rule 68 (primary)]
    ')'       reduce using rule 52 (expression)
    ')'       [reduce using rule 68 (primary)]
    $default  reduce using rule 52 (expression)


State 39

   53 expression: FLOAT_LITERAL •
   69 primary: FLOAT_LITERAL •

    ADDOP     reduce using rule 53 (expression)
    ADDOP     [reduce using rule 69 (primary)]
    MULOP     reduce using rule 53 (expression)
    MULOP     [reduce using rule 69 (primary)]
    ANDOP     reduce using rule 53 (expression)
    ANDOP     [reduce using rule 69 (primary)]
    RELOP     reduce using rule 53 (expression)
    RELOP     [reduce using rule 69 (primary)]
    EXPOP     reduce using rule 53 (expression)
    EXPOP     [reduce using rule 69 (primary)]
    MODOP     reduce using rule 53 (expression)
    MODOP     [reduce using rule 69 (primary)]
    OROP      reduce using rule 53 (expression)
    OROP      [reduce using rule 69 (primary)]
    THEN      reduce using rule 53 (expression)
    THEN      [reduce using rule 69 (primary)]
    ';'       reduce using rule 53 (expression)
    ';'       [reduce using rule 69 (primary)]
    ','       reduce using rule 53 (expression)
    ','       [reduce using rule 69 (primary)]
    ':'       reduce using rule 53 (expression)
    ':'       [reduce using rule 69 (primary)]
    ')'       reduce using rule 53 (expression)
    ')'       [reduce using rule 69 (primary)]
    $default  reduce using rule 53 (expression)


State 40

   48 expression: NEGOP • expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 62
    term        go to state 50
    primary     go to state 51


State 41

   26 statement: WHEN • condition
   28          | WHEN • condition ',' expression ':' expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    NOTOP          shift, and go to state 63
    '('            shift, and go to state 64

    condition   go to state 65
    relation    go to state 66
    expression  go to state 67
    term        go to state 50
    primary     go to state 51


State 42

   36 if_statement: IF • condition THEN statement_ elsif_clauses ENDIF
   37             | IF • condition THEN statement_ elsif_clauses ELSE statement_ ENDIF

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    NOTOP          shift, and go to state 63
    '('            shift, and go to state 64

    condition   go to state 68
    relation    go to state 66
    expression  go to state 67
    term        go to state 50
    primary     go to state 51


State 43

   31 fold_statement: FOLD • direction arithmetic_operator list_choice ENDFOLD

    LEFT   shift, and go to state 69
    RIGHT  shift, and go to state 70

    direction  go to state 71


State 44

   46 expression: '(' • expression ')'
   64 primary: '(' • expression ')'

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 72
    term        go to state 50
    primary     go to state 51


State 45

   23 body: BEGIN_ statement_ • END

    END  shift, and go to state 73


State 46

   24 statement_: statement • ';'

    ';'  shift, and go to state 74


State 47

   30 statement: fold_statement •

    $default  reduce using rule 30 (statement)


State 48

   29 statement: if_statement •

    $default  reduce using rule 29 (statement)


State 49

   27 statement: expression •
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    $default  reduce using rule 27 (statement)

    arithmetic_operator  go to state 79


State 50

   55 expression: term •
   60 term: term • EXPOP primary
   61     | term • MULOP primary
   62     | term • MODOP primary

    MULOP  shift, and go to state 80
    EXPOP  shift, and go to state 81
    MODOP  shift, and go to state 82

    MULOP     [reduce using rule 55 (expression)]
    EXPOP     [reduce using rule 55 (expression)]
    MODOP     [reduce using rule 55 (expression)]
    $default  reduce using rule 55 (expression)


State 51

   63 term: primary •

    $default  reduce using rule 63 (term)


State 52

    1 function: function_header optional_variable body ';' •

    $default  reduce using rule 1 (function)


State 53

   17 variables: error ';' •

    $default  reduce using rule 17 (variables)


State 54

    8 parameter: IDENTIFIER ':' type •

    $default  reduce using rule 8 (parameter)


State 55

    2 function_header: FUNCTION IDENTIFIER RETURNS type ';' •

    $default  reduce using rule 2 (function_header)


State 56

    3 function_header: FUNCTION IDENTIFIER parameters RETURNS type • ';'

    ';'  shift, and go to state 83


State 57

    6 more_parameters: ',' parameter • more_parameters

    ','  shift, and go to state 29

    $default  reduce using rule 7 (more_parameters)

    more_parameters  go to state 84


State 58

   19 variable: IDENTIFIER ':' LIST OF • type IS list ';'

    CHARACTER  shift, and go to state 24
    INTEGER    shift, and go to state 25
    REAL       shift, and go to state 26

    type  go to state 85


State 59

   18 variable: IDENTIFIER ':' type IS • statement ';'

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    WHEN           shift, and go to state 41
    IF             shift, and go to state 42
    FOLD           shift, and go to state 43
    '('            shift, and go to state 44

    statement       go to state 86
    fold_statement  go to state 47
    if_statement    go to state 48
    expression      go to state 49
    term            go to state 50
    primary         go to state 51


State 60

   25 statement_: error ';' •

    $default  reduce using rule 25 (statement_)


State 61

   70 primary: IDENTIFIER '(' • expression ')'

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 87
    term        go to state 50
    primary     go to state 51


State 62

   47 expression: expression • arithmetic_operator expression
   48           | NEGOP expression •
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    ADDOP     [reduce using rule 48 (expression)]
    MULOP     [reduce using rule 48 (expression)]
    EXPOP     [reduce using rule 48 (expression)]
    MODOP     [reduce using rule 48 (expression)]
    $default  reduce using rule 48 (expression)

    arithmetic_operator  go to state 79


State 63

   42 condition: NOTOP • condition

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    NOTOP          shift, and go to state 63
    '('            shift, and go to state 64

    condition   go to state 88
    relation    go to state 66
    expression  go to state 67
    term        go to state 50
    primary     go to state 51


State 64

   44 relation: '(' • condition ')'
   46 expression: '(' • expression ')'
   64 primary: '(' • expression ')'

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    NOTOP          shift, and go to state 63
    '('            shift, and go to state 64

    condition   go to state 89
    relation    go to state 66
    expression  go to state 90
    term        go to state 50
    primary     go to state 51


State 65

   26 statement: WHEN condition •
   28          | WHEN condition • ',' expression ':' expression
   40 condition: condition • ANDOP relation
   41          | condition • OROP relation

    ANDOP  shift, and go to state 91
    OROP   shift, and go to state 92
    ','    shift, and go to state 93

    $default  reduce using rule 26 (statement)


State 66

   43 condition: relation •

    $default  reduce using rule 43 (condition)


State 67

   45 relation: expression • RELOP expression
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    RELOP  shift, and go to state 94
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    arithmetic_operator  go to state 79


State 68

   36 if_statement: IF condition • THEN statement_ elsif_clauses ENDIF
   37             | IF condition • THEN statement_ elsif_clauses ELSE statement_ ENDIF
   40 condition: condition • ANDOP relation
   41          | condition • OROP relation

    ANDOP  shift, and go to state 91
    OROP   shift, and go to state 92
    THEN   shift, and go to state 95


State 69

   32 direction: LEFT •

    $default  reduce using rule 32 (direction)


State 70

   33 direction: RIGHT •

    $default  reduce using rule 33 (direction)


State 71

   31 fold_statement: FOLD direction • arithmetic_operator list_choice ENDFOLD

    ADDOP  shift, and go to state 96
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    arithmetic_operator  go to state 97


State 72

   46 expression: '(' expression • ')'
   47           | expression • arithmetic_operator expression
   54           | expression • ADDOP term
   64 primary: '(' expression • ')'

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78
    ')'    shift, and go to state 98

    arithmetic_operator  go to state 79


State 73

   23 body: BEGIN_ statement_ END •

    $default  reduce using rule 23 (body)


State 74

   24 statement_: statement ';' •

    $default  reduce using rule 24 (statement_)


State 75

   54 expression: expression ADDOP • term
   56 arithmetic_operator: ADDOP •

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 99
    CHAR_LITERAL   shift, and go to state 100
    REAL_LITERAL   shift, and go to state 101
    HEX_LITERAL    shift, and go to state 102
    FLOAT_LITERAL  shift, and go to state 103
    '('            shift, and go to state 104

    IDENTIFIER     [reduce using rule 56 (arithmetic_operator)]
    INT_LITERAL    [reduce using rule 56 (arithmetic_operator)]
    CHAR_LITERAL   [reduce using rule 56 (arithmetic_operator)]
    REAL_LITERAL   [reduce using rule 56 (arithmetic_operator)]
    HEX_LITERAL    [reduce using rule 56 (arithmetic_operator)]
    FLOAT_LITERAL  [reduce using rule 56 (arithmetic_operator)]
    '('            [reduce using rule 56 (arithmetic_operator)]
    $default       reduce using rule 56 (arithmetic_operator)

    term     go to state 105
    primary  go to state 51


State 76

   57 arithmetic_operator: MULOP •

    $default  reduce using rule 57 (arithmetic_operator)


State 77

   59 arithmetic_operator: EXPOP •

    $default  reduce using rule 59 (arithmetic_operator)


State 78

   58 arithmetic_operator: MODOP •

    $default  reduce using rule 58 (arithmetic_operator)


State 79

   47 expression: expression arithmetic_operator • expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 106
    term        go to state 50
    primary     go to state 51


State 80

   61 term: term MULOP • primary

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 99
    CHAR_LITERAL   shift, and go to state 100
    REAL_LITERAL   shift, and go to state 101
    HEX_LITERAL    shift, and go to state 102
    FLOAT_LITERAL  shift, and go to state 103
    '('            shift, and go to state 104

    primary  go to state 107


State 81

   60 term: term EXPOP • primary

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 99
    CHAR_LITERAL   shift, and go to state 100
    REAL_LITERAL   shift, and go to state 101
    HEX_LITERAL    shift, and go to state 102
    FLOAT_LITERAL  shift, and go to state 103
    '('            shift, and go to state 104

    primary  go to state 108


State 82

   62 term: term MODOP • primary

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 99
    CHAR_LITERAL   shift, and go to state 100
    REAL_LITERAL   shift, and go to state 101
    HEX_LITERAL    shift, and go to state 102
    FLOAT_LITERAL  shift, and go to state 103
    '('            shift, and go to state 104

    primary  go to state 109


State 83

    3 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';' •

    $default  reduce using rule 3 (function_header)


State 84

    6 more_parameters: ',' parameter more_parameters •

    $default  reduce using rule 6 (more_parameters)


State 85

   19 variable: IDENTIFIER ':' LIST OF type • IS list ';'

    IS  shift, and go to state 110


State 86

   18 variable: IDENTIFIER ':' type IS statement • ';'

    ';'  shift, and go to state 111


State 87

   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term
   70 primary: IDENTIFIER '(' expression • ')'

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78
    ')'    shift, and go to state 112

    arithmetic_operator  go to state 79


State 88

   40 condition: condition • ANDOP relation
   41          | condition • OROP relation
   42          | NOTOP condition •

    ANDOP  shift, and go to state 91
    OROP   shift, and go to state 92

    ANDOP     [reduce using rule 42 (condition)]
    OROP      [reduce using rule 42 (condition)]
    $default  reduce using rule 42 (condition)


State 89

   40 condition: condition • ANDOP relation
   41          | condition • OROP relation
   44 relation: '(' condition • ')'

    ANDOP  shift, and go to state 91
    OROP   shift, and go to state 92
    ')'    shift, and go to state 113


State 90

   45 relation: expression • RELOP expression
   46 expression: '(' expression • ')'
   47           | expression • arithmetic_operator expression
   54           | expression • ADDOP term
   64 primary: '(' expression • ')'

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    RELOP  shift, and go to state 94
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78
    ')'    shift, and go to state 98

    arithmetic_operator  go to state 79


State 91

   40 condition: condition ANDOP • relation

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 64

    relation    go to state 114
    expression  go to state 67
    term        go to state 50
    primary     go to state 51


State 92

   41 condition: condition OROP • relation

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 64

    relation    go to state 115
    expression  go to state 67
    term        go to state 50
    primary     go to state 51


State 93

   28 statement: WHEN condition ',' • expression ':' expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 116
    term        go to state 50
    primary     go to state 51


State 94

   45 relation: expression RELOP • expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 117
    term        go to state 50
    primary     go to state 51


State 95

   36 if_statement: IF condition THEN • statement_ elsif_clauses ENDIF
   37             | IF condition THEN • statement_ elsif_clauses ELSE statement_ ENDIF

    error          shift, and go to state 33
    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    WHEN           shift, and go to state 41
    IF             shift, and go to state 42
    FOLD           shift, and go to state 43
    '('            shift, and go to state 44

    statement_      go to state 118
    statement       go to state 46
    fold_statement  go to state 47
    if_statement    go to state 48
    expression      go to state 49
    term            go to state 50
    primary         go to state 51


State 96

   56 arithmetic_operator: ADDOP •

    $default  reduce using rule 56 (arithmetic_operator)


State 97

   31 fold_statement: FOLD direction arithmetic_operator • list_choice ENDFOLD

    IDENTIFIER  shift, and go to state 119
    '('         shift, and go to state 120

    list         go to state 121
    list_choice  go to state 122


State 98

   46 expression: '(' expression ')' •
   64 primary: '(' expression ')' •

    ADDOP     reduce using rule 46 (expression)
    ADDOP     [reduce using rule 64 (primary)]
    MULOP     reduce using rule 46 (expression)
    MULOP     [reduce using rule 64 (primary)]
    ANDOP     reduce using rule 46 (expression)
    ANDOP     [reduce using rule 64 (primary)]
    RELOP     reduce using rule 46 (expression)
    RELOP     [reduce using rule 64 (primary)]
    EXPOP     reduce using rule 46 (expression)
    EXPOP     [reduce using rule 64 (primary)]
    MODOP     reduce using rule 46 (expression)
    MODOP     [reduce using rule 64 (primary)]
    OROP      reduce using rule 46 (expression)
    OROP      [reduce using rule 64 (primary)]
    THEN      reduce using rule 46 (expression)
    THEN      [reduce using rule 64 (primary)]
    ';'       reduce using rule 46 (expression)
    ';'       [reduce using rule 64 (primary)]
    ','       reduce using rule 46 (expression)
    ','       [reduce using rule 64 (primary)]
    ':'       reduce using rule 46 (expression)
    ':'       [reduce using rule 64 (primary)]
    ')'       reduce using rule 46 (expression)
    ')'       [reduce using rule 64 (primary)]
    $default  reduce using rule 46 (expression)


State 99

   65 primary: INT_LITERAL •

    $default  reduce using rule 65 (primary)


State 100

   66 primary: CHAR_LITERAL •

    $default  reduce using rule 66 (primary)


State 101

   67 primary: REAL_LITERAL •

    $default  reduce using rule 67 (primary)


State 102

   68 primary: HEX_LITERAL •

    $default  reduce using rule 68 (primary)


State 103

   69 primary: FLOAT_LITERAL •

    $default  reduce using rule 69 (primary)


State 104

   64 primary: '(' • expression ')'

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 123
    term        go to state 50
    primary     go to state 51


State 105

   54 expression: expression ADDOP term •
   60 term: term • EXPOP primary
   61     | term • MULOP primary
   62     | term • MODOP primary

    MULOP  shift, and go to state 80
    EXPOP  shift, and go to state 81
    MODOP  shift, and go to state 82

    MULOP     [reduce using rule 54 (expression)]
    EXPOP     [reduce using rule 54 (expression)]
    MODOP     [reduce using rule 54 (expression)]
    $default  reduce using rule 54 (expression)


State 106

   47 expression: expression • arithmetic_operator expression
   47           | expression arithmetic_operator expression •
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    ADDOP     [reduce using rule 47 (expression)]
    MULOP     [reduce using rule 47 (expression)]
    EXPOP     [reduce using rule 47 (expression)]
    MODOP     [reduce using rule 47 (expression)]
    $default  reduce using rule 47 (expression)

    arithmetic_operator  go to state 79


State 107

   61 term: term MULOP primary •

    $default  reduce using rule 61 (term)


State 108

   60 term: term EXPOP primary •

    $default  reduce using rule 60 (term)


State 109

   62 term: term MODOP primary •

    $default  reduce using rule 62 (term)


State 110

   19 variable: IDENTIFIER ':' LIST OF type IS • list ';'

    '('  shift, and go to state 120

    list  go to state 124


State 111

   18 variable: IDENTIFIER ':' type IS statement ';' •

    $default  reduce using rule 18 (variable)


State 112

   70 primary: IDENTIFIER '(' expression ')' •

    $default  reduce using rule 70 (primary)


State 113

   44 relation: '(' condition ')' •

    $default  reduce using rule 44 (relation)


State 114

   40 condition: condition ANDOP relation •

    $default  reduce using rule 40 (condition)


State 115

   41 condition: condition OROP relation •

    $default  reduce using rule 41 (condition)


State 116

   28 statement: WHEN condition ',' expression • ':' expression
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78
    ':'    shift, and go to state 125

    arithmetic_operator  go to state 79


State 117

   45 relation: expression RELOP expression •
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    $default  reduce using rule 45 (relation)

    arithmetic_operator  go to state 79


State 118

   36 if_statement: IF condition THEN statement_ • elsif_clauses ENDIF
   37             | IF condition THEN statement_ • elsif_clauses ELSE statement_ ENDIF

    ELSIF  shift, and go to state 126

    $default  reduce using rule 38 (elsif_clauses)

    elsif_clauses  go to state 127


State 119

   35 list_choice: IDENTIFIER •

    $default  reduce using rule 35 (list_choice)


State 120

   20 list: '(' • expressions ')'

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expressions  go to state 128
    expression   go to state 129
    term         go to state 50
    primary      go to state 51


State 121

   34 list_choice: list •

    $default  reduce using rule 34 (list_choice)


State 122

   31 fold_statement: FOLD direction arithmetic_operator list_choice • ENDFOLD

    ENDFOLD  shift, and go to state 130


State 123

   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term
   64 primary: '(' expression • ')'

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78
    ')'    shift, and go to state 131

    arithmetic_operator  go to state 79


State 124

   19 variable: IDENTIFIER ':' LIST OF type IS list • ';'

    ';'  shift, and go to state 132


State 125

   28 statement: WHEN condition ',' expression ':' • expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 133
    term        go to state 50
    primary     go to state 51


State 126

   39 elsif_clauses: ELSIF • condition THEN statement_ elsif_clauses

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    NOTOP          shift, and go to state 63
    '('            shift, and go to state 64

    condition   go to state 134
    relation    go to state 66
    expression  go to state 67
    term        go to state 50
    primary     go to state 51


State 127

   36 if_statement: IF condition THEN statement_ elsif_clauses • ENDIF
   37             | IF condition THEN statement_ elsif_clauses • ELSE statement_ ENDIF

    ELSE   shift, and go to state 135
    ENDIF  shift, and go to state 136


State 128

   20 list: '(' expressions • ')'
   21 expressions: expressions • ',' expression

    ','  shift, and go to state 137
    ')'  shift, and go to state 138


State 129

   22 expressions: expression •
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    $default  reduce using rule 22 (expressions)

    arithmetic_operator  go to state 79


State 130

   31 fold_statement: FOLD direction arithmetic_operator list_choice ENDFOLD •

    $default  reduce using rule 31 (fold_statement)


State 131

   64 primary: '(' expression ')' •

    $default  reduce using rule 64 (primary)


State 132

   19 variable: IDENTIFIER ':' LIST OF type IS list ';' •

    $default  reduce using rule 19 (variable)


State 133

   28 statement: WHEN condition ',' expression ':' expression •
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    $default  reduce using rule 28 (statement)

    arithmetic_operator  go to state 79


State 134

   39 elsif_clauses: ELSIF condition • THEN statement_ elsif_clauses
   40 condition: condition • ANDOP relation
   41          | condition • OROP relation

    ANDOP  shift, and go to state 91
    OROP   shift, and go to state 92
    THEN   shift, and go to state 139


State 135

   37 if_statement: IF condition THEN statement_ elsif_clauses ELSE • statement_ ENDIF

    error          shift, and go to state 33
    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    WHEN           shift, and go to state 41
    IF             shift, and go to state 42
    FOLD           shift, and go to state 43
    '('            shift, and go to state 44

    statement_      go to state 140
    statement       go to state 46
    fold_statement  go to state 47
    if_statement    go to state 48
    expression      go to state 49
    term            go to state 50
    primary         go to state 51


State 136

   36 if_statement: IF condition THEN statement_ elsif_clauses ENDIF •

    $default  reduce using rule 36 (if_statement)


State 137

   21 expressions: expressions ',' • expression

    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    '('            shift, and go to state 44

    expression  go to state 141
    term        go to state 50
    primary     go to state 51


State 138

   20 list: '(' expressions ')' •

    $default  reduce using rule 20 (list)


State 139

   39 elsif_clauses: ELSIF condition THEN • statement_ elsif_clauses

    error          shift, and go to state 33
    IDENTIFIER     shift, and go to state 34
    INT_LITERAL    shift, and go to state 35
    CHAR_LITERAL   shift, and go to state 36
    REAL_LITERAL   shift, and go to state 37
    HEX_LITERAL    shift, and go to state 38
    FLOAT_LITERAL  shift, and go to state 39
    NEGOP          shift, and go to state 40
    WHEN           shift, and go to state 41
    IF             shift, and go to state 42
    FOLD           shift, and go to state 43
    '('            shift, and go to state 44

    statement_      go to state 142
    statement       go to state 46
    fold_statement  go to state 47
    if_statement    go to state 48
    expression      go to state 49
    term            go to state 50
    primary         go to state 51


State 140

   37 if_statement: IF condition THEN statement_ elsif_clauses ELSE statement_ • ENDIF

    ENDIF  shift, and go to state 143


State 141

   21 expressions: expressions ',' expression •
   47 expression: expression • arithmetic_operator expression
   54           | expression • ADDOP term

    ADDOP  shift, and go to state 75
    MULOP  shift, and go to state 76
    EXPOP  shift, and go to state 77
    MODOP  shift, and go to state 78

    $default  reduce using rule 21 (expressions)

    arithmetic_operator  go to state 79


State 142

   39 elsif_clauses: ELSIF condition THEN statement_ • elsif_clauses

    ELSIF  shift, and go to state 126

    $default  reduce using rule 38 (elsif_clauses)

    elsif_clauses  go to state 144


State 143

   37 if_statement: IF condition THEN statement_ elsif_clauses ELSE statement_ ENDIF •

    $default  reduce using rule 37 (if_statement)


State 144

   39 elsif_clauses: ELSIF condition THEN statement_ elsif_clauses •

    $default  reduce using rule 39 (elsif_clauses)
